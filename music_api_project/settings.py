"""
Django settings for music_api_project project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

import cloudinary as cloudinary
import environ
from music_api.permissions import IsOwnerOrReadOnly

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
  DEBUG=(bool, False),
  ENVIRONMENT=(str, "PRODUCTION"),
  ALLOW_ALL_ORIGINS=(bool, False),
  ALLOWED_HOSTS=(list, []),
  ALLOWED_ORIGINS=(list, []),
  CSRF_TRUSTED_ORIGINS=(list, []),  # lab 39
  DATABASE_ENGINE=(str, "django.db.backends.sqlite3"),
  DATABASE_NAME=(str, BASE_DIR / "db.sqlite3"),
  DATABASE_USER=(str, ""),
  DATABASE_PASSWORD=(str, ""),
  DATABASE_HOST=(str, ""),
  DATABASE_PORT=(int, 5432),
  SECRET_KEY=(str, "rSY9)s2|_1;6/]E|e+dbHwV.:K4m>B")

)

environ.Env.read_env()

ENVIRONMENT = env.str("ENVIRONMENT")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = tuple(env.list("ALLOWED_HOSTS"))

# Application definition

INSTALLED_APPS = [
  'django.contrib.admin',
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  "whitenoise.runserver_nostatic",  # Use this with whitenoise
  'django.contrib.staticfiles',

  'cloudinary',

  'drf_spectacular',

  'rest_framework',

  'crispy_forms',

  'music_api',

]

MIDDLEWARE = [
  'whitenoise.middleware.WhiteNoiseMiddleware',
  'django.middleware.security.SecurityMiddleware',
  'django.contrib.sessions.middleware.SessionMiddleware',
  'django.middleware.common.CommonMiddleware',
  'django.middleware.csrf.CsrfViewMiddleware',
  'django.contrib.auth.middleware.AuthenticationMiddleware',
  'django.contrib.messages.middleware.MessageMiddleware',
  'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'music_api_project.urls'

TEMPLATES = [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [
      BASE_DIR / 'templates'
    ],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]

WSGI_APPLICATION = 'music_api_project.wsgi.app'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
  "default": {
    "ENGINE": env.str("DATABASE_ENGINE"),
    "NAME": env.str("DATABASE_NAME"),
    "USER": env.str("DATABASE_USER"),
    "PASSWORD": env.str("DATABASE_PASSWORD"),
    "HOST": env.str("DATABASE_HOST"),
    "PORT": env.int("DATABASE_PORT"),
  }
}
# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
  {
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
  },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = (
  os.path.join(BASE_DIR, "static/"),
)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
  "DEFAULT_PERMISSION_CLASSES": [
    # "rest_framework.permissions.IsAuthenticated",
    "rest_framework.permissions.AllowAny",
  ],
  "DEFAULT_AUTHENTICATION_CLASSES": [
    "rest_framework_simplejwt.authentication.JWTAuthentication",
    "rest_framework.authentication.SessionAuthentication",
    "rest_framework.authentication.BasicAuthentication",
  ],
  'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', }

SPECTACULAR_SETTINGS = {
  'TITLE': 'Your Project API',
  'DESCRIPTION': 'Your project description',
  'VERSION': '1.0.0',
  'SERVE_INCLUDE_SCHEMA': False,
  # OTHER SETTINGS
}

STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

CSRF_TRUSTED_ORIGINS = [
  'https://.vercel.app', 'http://127.0.0.1:8000/'
]
CORS_ORIGIN_WHITELIST = tuple(env.list("ALLOWED_ORIGINS"))
CORS_ALLOW_ALL_ORIGINS = env.bool("ALLOW_ALL_ORIGINS")

cloudinary.config(
  cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME'),
  api_key=os.getenv('CLOUDINARY_API_KEY'),
  api_secret=os.getenv('CLOUDINARY_API_SECRET')
)
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

X_FRAME_OPTIONS = 'ALLOW-FROM https://thomasbashamportfolio.net'
